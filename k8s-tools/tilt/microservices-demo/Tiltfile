# docker_compose("./docker-compose.yml")

docker_build('[YOUR REGISTRY URL]/microservices-demo-api',
             context='.',
             # (Optional) Use a custom Dockerfile path
             dockerfile='./deploy/api.dockerfile',
             # (Optional) Filter the paths used in the build
             only=['./api/app'],
             # (Recommended) Updating a running container in-place
             # https://docs.tilt.dev/live_update_reference.html
             live_update=[
                # Sync files from host to container
                sync('./api/app/', '/app/'),
                # Execute commands inside the container when certain
                # paths change
                run('pip install -r /app/requirements.txt',trigger=['./api/app/requirements.txt'])
             ]
)

docker_build('[YOUR REGISTRY URL]/microservices-demo-worker',
             context='.',
             # (Optional) Use a custom Dockerfile path
             dockerfile='./deploy/worker.dockerfile',
             # (Optional) Filter the paths used in the build
             only=['./worker/app'],
             # (Recommended) Updating a running container in-place
             # https://docs.tilt.dev/live_update_reference.html
             live_update=[
                # Sync files from host to container
                sync('./worker/app/', '/app/'),
                # Execute commands inside the container when certain
                # paths change
                run('pip install -r /app/requirements.txt',trigger=['./worker/app/requirements.txt'])
             ]
)

docker_build('[YOUR REGISTRY URL]/microservices-demo-process',
             context='.',
             # (Optional) Use a custom Dockerfile path
             dockerfile='./deploy/process.dockerfile',
             # (Optional) Filter the paths used in the build
             only=['./process/app'],
             # (Recommended) Updating a running container in-place
             # https://docs.tilt.dev/live_update_reference.html
             live_update=[
                # Sync files from host to container
                sync('./process/app/', '/app/'),
                # Execute commands inside the container when certain
                # paths change
                run('pip install -r /app/requirements.txt',trigger=['./process/app/requirements.txt'])
             ]
)

k8s_yaml(['k8s/api-deploy-svc.yml', 'k8s/worker-deploy.yml', 'k8s/process-deploy.yml'])
k8s_resource(workload='microservices-demo-api', port_forwards='8000:8000')
allow_k8s_contexts('[YOUR KUBECONFIG CONTEXT]')


load('ext://helm_resource', 'helm_resource', 'helm_repo')
helm_repo('bitnami', 'https://charts.bitnami.com/bitnami')
helm_resource('postgresql', 'bitnami/postgresql', 
                  namespace='microservices-demo', 
                  flags=['--set', 'primary.persistence.storageClass=rook-ceph-block'])